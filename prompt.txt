
dont add the scale effect on the hero section items its not good keep it simple.
also when I click on get started it should scroll to that section smoothly.
also updated the scroll bar in the chat area that complements the website color theme (dark).


import React, { useCallback, useState } from 'react';
import { Upload } from 'lucide-react';

interface FileUploadProps {
  onUpload: (image: string) => void;
}

export function FileUpload({ onUpload }: FileUploadProps) {
  const [isDragging, setIsDragging] = useState(false);

  const handleFile = useCallback((file: File) => {
    if (!file.type.startsWith('image/')) {
      alert('Please upload an image file');
      return;
    }

    // Check file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('File size should be less than 5MB');
      return;
    }

    const reader = new FileReader();
    reader.onloadend = () => {
      // Create an image element to check dimensions
      const img = new Image();
      img.onload = () => {
        // Create a canvas to resize if necessary
        const canvas = document.createElement('canvas');
        let width = img.width;
        let height = img.height;

        // Max dimensions
        const MAX_WIDTH = 1280;
        const MAX_HEIGHT = 720;

        // Scale down if image is too large
        if (width > MAX_WIDTH || height > MAX_HEIGHT) {
          if (width / height > MAX_WIDTH / MAX_HEIGHT) {
            height = height * (MAX_WIDTH / width);
            width = MAX_WIDTH;
          } else {
            width = width * (MAX_HEIGHT / height);
            height = MAX_HEIGHT;
          }
        }

        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        ctx?.drawImage(img, 0, 0, width, height);

        const resizedImage = canvas.toDataURL('image/jpeg', 0.9);
        onUpload(resizedImage);
      };
      img.src = reader.result as string;
    };
    reader.readAsDataURL(file);
  }, [onUpload]);

  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    if (file) handleFile(file);
  }, [handleFile]);

  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleFileChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) handleFile(file);
  }, [handleFile]);

  return (
    <div className="w-full max-w-md mx-auto">
      <div
        className={`flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer transition-colors ${
          isDragging
            ? 'border-indigo-500 bg-indigo-50/10'
            : 'border-gray-500 hover:border-indigo-500'
        }`}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
      >
        <label className="flex flex-col items-center justify-center w-full h-full cursor-pointer">
          <div className="flex flex-col items-center justify-center pt-5 pb-6">
            <Upload className={`w-8 h-8 mb-2 ${isDragging ? 'text-indigo-500' : 'text-gray-400'}`} />
            <p className="mb-2 text-sm text-gray-400">
              <span className="font-semibold">Click to upload</span> or drag and drop
            </p>
            <p className="text-xs text-gray-400">PNG, JPG or JPEG (max. 5MB)</p>
          </div>
          <input
            type="file"
            className="hidden"
            accept="image/*"
            onChange={handleFileChange}
          />
        </label>
      </div>
    </div>
  );
}


import { useRef, useCallback, useState } from "react";
import { Camera, ImagePlus } from "lucide-react";

interface WebcamCaptureProps {
  onCapture: (image: string) => void;
}

export function WebcamCapture({ onCapture }: WebcamCaptureProps) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const [isStreaming, setIsStreaming] = useState(false);

  const toggleCamera = useCallback(async () => {
    if (isStreaming) {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
        if (videoRef.current) {
          videoRef.current.srcObject = null;
        }
        streamRef.current = null;
      }
      setIsStreaming(false);
    } else {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: "user",
            width: { ideal: 1280 },
            height: { ideal: 720 },
          },
        });

        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          streamRef.current = stream;
        }
        setIsStreaming(true);
      } catch (err) {
        console.error("Error accessing webcam:", err);
      }
    }
  }, [isStreaming]);

  const capturePhoto = useCallback(() => {
    if (videoRef.current) {
      const canvas = document.createElement("canvas");
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      const ctx = canvas.getContext("2d");
  
      if (ctx) {
        // Flip the image horizontally before drawing
        ctx.translate(canvas.width, 0);
        ctx.scale(-1, 1);
  
        // Draw the flipped video frame
        ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);
  
        // Convert the canvas to an image
        const imageData = canvas.toDataURL("image/jpeg", 1.0);
        onCapture(imageData);
      }
    }
  }, [onCapture]);
  

  return (
    <div className="flex flex-col items-center justify-center py-10">
      <div className="w-full max-w-3xl aspect-video">
        <video
          ref={videoRef}
          autoPlay
          playsInline
          className="w-full h-full scale-x-[-1] rounded-lg shadow-lg bg-gray-900 "
        />
      </div>
      <div className="flex justify-center gap-6 mt-6">
        <button
          onClick={toggleCamera}
          className={`px-6 py-2 rounded-lg transition-colors flex items-center gap-2 ${
            isStreaming
              ? "bg-red-600 hover:bg-red-700"
              : "bg-indigo-600 hover:bg-indigo-700"
          }`}
        >
          <Camera size={20} />
          {isStreaming ? "Stop Camera" : "Start Camera"}
        </button>
        {isStreaming && (
          <button
            onClick={capturePhoto}
            className="px-6 py-2 rounded-lg transition-colors flex items-center gap-2 bg-green-600 hover:bg-green-700"
          >
            <ImagePlus size={20} />
            Capture
          </button>
        )}
      </div>
    </div>
  );
}




// import React from "react";
import {
  Smile,
  Frown,
  Angry,
  Meh,
  Heart,
  Pocket as Shocked,
  Cone as Confused,
} from "lucide-react";

interface EmotionDisplayProps {
  emotion: string | null;
  confidence?: number | null;
}

export function EmotionDisplay({ emotion, confidence }: EmotionDisplayProps) {
  const getEmotionIcon = () => {
    switch (emotion?.toLowerCase()) {
      case "happy":
        return <Smile className="w-16 h-16 text-yellow-400" />;
      case "sad":
        return <Frown className="w-16 h-16 text-blue-400" />;
      case "angry":
        return <Angry className="w-16 h-16 text-red-400" />;
      case "neutral":
        return <Meh className="w-16 h-16 text-gray-400" />;
      case "love":
        return <Heart className="w-16 h-16 text-pink-400" />;
      case "surprise":
        return <Shocked className="w-16 h-16 text-purple-400" />;
      default:
        return <Confused className="w-16 h-16 text-gray-400" />;
    }
  };

  if (!emotion) return null;

  return (
    <div className="flex flex-col items-center justify-center p-6 bg-gray-800 rounded-lg shadow-lg">
      {getEmotionIcon()}
      <h3 className="mt-4 text-xl font-bold text-white capitalize">
        {emotion}
      </h3>
      {confidence && (
        <p className="text-gray-400">
          Confidence: {(confidence * 100).toFixed(1)}%
        </p>
      )}
    </div>
  );
}



These are the current files update the new code according to these files.
